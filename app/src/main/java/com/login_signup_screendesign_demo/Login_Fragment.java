package com.login_signup_screendesign_demo;import java.io.Serializable;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;import android.content.Context;import android.content.Intent;import android.content.res.ColorStateList;import android.content.res.XmlResourceParser;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.text.InputType;import android.text.method.HideReturnsTransformationMethod;import android.text.method.PasswordTransformationMethod;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import com.google.android.gms.auth.api.Auth;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;import com.google.android.gms.auth.api.signin.GoogleSignInResult;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.SignInButton;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.ResultCallback;import com.google.android.gms.common.api.Status;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class Login_Fragment extends Fragment implements OnClickListener,myInterface {	private static View view;	public static EditText emailid, password;	private static Button loginButton;	private static TextView forgotPassword, signUp;	private static CheckBox show_hide_password;	public static LinearLayout loginLayout;	public static Animation shakeAnimation;	private static FragmentManager fragmentManager;	private static SignInButton signInButton;	private static GoogleApiClient googleApiClient;	final int REQ_CODE = 9001;	final String ROOT_URL = "http://192.168.43.1/sj/";	User_Info user_info;	String emailid1,emailid2;	private myInterface listener;	public Login_Fragment() {		user_info=null;	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		view = inflater.inflate(R.layout.login_layout, container, false);		initViews();		setListeners();		return view;	}	// Initiate Views	private void initViews() {		fragmentManager = getActivity().getSupportFragmentManager();		emailid = (EditText) view.findViewById(R.id.login_emailid);		password = (EditText) view.findViewById(R.id.login_password);		loginButton = (Button) view.findViewById(R.id.loginBtn);		forgotPassword = (TextView) view.findViewById(R.id.forgot_password);		signUp = (TextView) view.findViewById(R.id.createAccount);		show_hide_password = (CheckBox) view				.findViewById(R.id.show_hide_password);		loginLayout = (LinearLayout) view.findViewById(R.id.login_layout);		//For Google Sign IN//		signInButton = (SignInButton) view.findViewById(R.id.SignIn);//		GoogleSignInOptions googleSignInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestEmail().build();//		googleApiClient = new GoogleApiClient.Builder(Login_Fragment.this.getActivity()).enableAutoManage(Login_Fragment.this.getActivity(),this).addApi(Auth.GOOGLE_SIGN_IN_API,googleSignInOptions).build();		// Load ShakeAnimation		shakeAnimation = AnimationUtils.loadAnimation(getActivity(),				R.anim.shake);		// Setting text selector over textviews		XmlResourceParser xrp = getResources().getXml(R.drawable.text_selector);		try {			ColorStateList csl = ColorStateList.createFromXml(getResources(),					xrp);			forgotPassword.setTextColor(csl);			show_hide_password.setTextColor(csl);			signUp.setTextColor(csl);		} catch (Exception e) {		}	}////	@Override//	public void onAttach(Context context) {//		super.onAttach(context);//		if(context instanceof myInterface)//			listener = (myInterface) context;//	}////	@Override//	public void onDetach() {//		listener=null;//		super.onDetach();//	}	public void validateUser(){		final Retrofit retrofit = new Retrofit.Builder().baseUrl(ROOT_URL).addConverterFactory(GsonConverterFactory.create()).build();		LoginAPI loginAPI = retrofit.create(LoginAPI.class);		Call<Integer> call = loginAPI.validateUser(emailid.getText().toString(),password.getText().toString());		call.enqueue(new Callback<Integer>() {			@Override			public void onResponse(Call<Integer> call, Response<Integer> response) {				int value=-1;				value =  response.body();				if(value ==1) {					Login_Fragment.this.getActivity().runOnUiThread(new Runnable() {						@Override						public void run() {							new CustomToast().Show_Toast(getActivity(), view,									"Login Successful");						}					});					APIClient apiClient = retrofit.create(APIClient.class);					Call<List<User_Info>> listCall = apiClient.getUser_Info(emailid.getText().toString());					listCall.enqueue(new Callback<List<User_Info>>() {						@Override						public void onResponse(Call<List<User_Info>> call, Response<List<User_Info>> response) {							if (response.isSuccessful()) {								Log.d("PWD", "2");								List<User_Info> user_infos = response.body();								user_info = user_infos.get(0);								SaveSharedPreference.setPrefEmailId(getActivity().getApplicationContext(),user_info.getEmail_id());								SaveSharedPreference.setUserName(getActivity().getApplicationContext(),user_info.getName());								SaveSharedPreference.setPrefTagLine(getActivity().getApplicationContext(),user_info.getTagLine());//								SaveSharedPreference.setPrefImageUrl(getActivity().getApplicationContext(),user_info.getImageURL());								SaveSharedPreference.setPrefAddr(getActivity().getApplicationContext(),user_info.getAddress());								SaveSharedPreference.setPrefPasswd(getActivity().getApplicationContext(),user_info.getPassword());								SaveSharedPreference.setPrefUserId(getActivity().getApplicationContext(),user_info.getUser_id());								SaveSharedPreference.setPrefUserAns(getActivity().getApplicationContext(),user_info.getAns_given());								SaveSharedPreference.setPrefUserBm(getActivity().getApplicationContext(),user_info.getBook_marks());								SaveSharedPreference.setPrefUserQues(getActivity().getApplicationContext(),user_info.getQues_asked());								SaveSharedPreference.setPrefUserFoll(getActivity().getApplicationContext(),user_info.getFollower());								SaveSharedPreference.setPrefUserUp(getActivity().getApplicationContext(),user_info.getUpvote());								Log.d("sab","Inside Login : "+SaveSharedPreference.getPrefUserName(getActivity().getApplicationContext()));//								emailid1 = user_info.getEmail_id();//								emailid2 = emailid1;//								Log.d("User_info",""+user_info.getEmail_id());//								object.doSomething(user_info);							}							if(user_info != null)								Log.d("User_info",""+user_info.getName());							Intent intent = new Intent(Login_Fragment.this.getActivity(),Main5Activity.class);							intent.putExtra("Object",user_info);							startActivity(intent);							getActivity().finish();						}						@Override						public void onFailure(Call<List<User_Info>> call, Throwable t) {							Log.d("HELLO",""+t.getMessage());						}					});//					Log.d("User_info",""+user_info.getName());				}				else{					Login_Fragment.this.getActivity().runOnUiThread(new Runnable() {						@Override						public void run() {							new CustomToast().Show_Toast(getActivity(), view,									"Wrong Username/Password");						}					});				}			}			@Override			public void onFailure(Call<Integer> call, Throwable t) {				Login_Fragment.this.getActivity().runOnUiThread(new Runnable() {					@Override					public void run() {						new CustomToast().Show_Toast(getActivity(), view,								"Check Your network connection.");					}				});			}		});//		return value;	}	// Set Listeners	private void setListeners() {		loginButton.setOnClickListener(this);		forgotPassword.setOnClickListener(this);		signUp.setOnClickListener(this);//		signInButton.setOnClickListener(this);		// Set check listener over checkbox for showing and hiding password		show_hide_password				.setOnCheckedChangeListener(new OnCheckedChangeListener() {					@Override					public void onCheckedChanged(CompoundButton button,							boolean isChecked) {						// If it is checked then show password else hide						// password						if (isChecked) {							show_hide_password.setText(R.string.hide_pwd);// change																			// checkbox																			// text							password.setInputType(InputType.TYPE_CLASS_TEXT);							password.setTransformationMethod(HideReturnsTransformationMethod									.getInstance());// show password						} else {							show_hide_password.setText(R.string.show_pwd);// change																			// checkbox																			// text							password.setInputType(InputType.TYPE_CLASS_TEXT									| InputType.TYPE_TEXT_VARIATION_PASSWORD);							password.setTransformationMethod(PasswordTransformationMethod									.getInstance());// hide password						}					}				});	}	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.loginBtn:			checkValidation();			break;		case R.id.forgot_password:			// Replace forgot password fragment with animation			fragmentManager					.beginTransaction()					.setCustomAnimations(R.anim.right_enter, R.anim.left_out)					.replace(R.id.frameContainer,							new ForgotPassword_Fragment(),							Utils.ForgotPassword_Fragment).commit();			break;		case R.id.createAccount:			// Replace signup frgament with animation			fragmentManager					.beginTransaction()					.setCustomAnimations(R.anim.right_enter, R.anim.left_out)					.replace(R.id.frameContainer, new SignUp_Fragment(),							Utils.SignUp_Fragment).commit();			break;		}	}	// Check Validation before login	private void checkValidation() {		Boolean flag=false;		// Get email id and password        String getEmailId = emailid.getText().toString();        String getPassword = password.getText().toString();		// Check patter for email id		Pattern p = Pattern.compile(Utils.regEx);		Matcher m = p.matcher(getEmailId);		// Check for both field is empty or not		if (getEmailId.equals("") || getEmailId.length() == 0				|| getPassword.equals("") || getPassword.length() == 0) {			loginLayout.startAnimation(shakeAnimation);			new CustomToast().Show_Toast(getActivity(), view,					"Enter both credentials.");		}		// Check if email id is valid or not		else {			if (!m.find())				new CustomToast().Show_Toast(getActivity(), view,						"Your Email Id is Invalid.");				// Else do login and do your stuff			else {				validateUser();//				passInformation();//				Intent intent = new Intent(Login_Fragment.this.getActivity(),MainActivity2.class);//				startActivity(intent);//			Toast.makeText(getActivity(), "Do Login.", Toast.LENGTH_SHORT)//					.show();//                new New_Login().execute();//				Log.d("User_info",""+emailid1);//				int[] value = new int[1];//				value[0]=-1;//				value =validateUser();//				Log.i("User_info",""+value[0]);//				if(value[0]==0) {//					Log.d("User_info", "" + emailid1);//					Intent intent = new Intent(Login_Fragment.this.getActivity(), MainActivity2.class);//					startActivity(intent);//				}//				listener.doSomething(user_info);			}		}	}	public void passInformation(User_Info info){		Log.d("User_info",""+info.getEmail_id());		Intent intent = new Intent(Login_Fragment.this.getActivity(),MainActivity2.class);		startActivity(intent);	}	@Override	public void onDestroy() {		super.onDestroy();//		Log.d("Kaisa Hai","Inside Login onDestroy");//		SaveSharedPreference.clearUserName(getContext());//		Log.d("Kaisa Hai","The emailid is :"+SaveSharedPreference.getUserName(getActivity()));//		googleApiClient.stopAutoManage(getActivity());//		googleApiClient.disconnect();	}	@Override	public void onPause() {		super.onPause();//		googleApiClient.stopAutoManage(getActivity());//		googleApiClient.disconnect();	}////	@Override//	public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {////	}//	public void signIn(){//		Intent intent = Auth.GoogleSignInApi.getSignInIntent(googleApiClient);//		startActivityForResult(intent,REQ_CODE);//	}//	@Override//	public void onActivityResult(int requestCode, int resultCode, Intent data) {//		super.onActivityResult(requestCode, resultCode, data);//		if(requestCode==REQ_CODE){//			GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);//			handleResult(result);//		}//	}////	public void handleResult(GoogleSignInResult result){//		if(result.isSuccess()){//			GoogleSignInAccount googleSignInAccount = result.getSignInAccount();//			String name = googleSignInAccount.getDisplayName();//			String email_id = googleSignInAccount.getEmail();////////////			googleApiClient.stopAutoManage(getActivity());//			googleApiClient.disconnect();////			Login_Fragment.this.getActivity().runOnUiThread(new Runnable() {////				@Override////				public void run() {////					new CustomToast().Show_Toast(getActivity(), view,////							"Login Successful.");////				}////			});//		}//	}	@Override	public void doSomething(User_Info info) {		user_info = info;		passInformation(user_info);	}	private class New_Login extends AsyncTask<Void, Void, Void> {        String getEmailId = emailid.getText().toString();        String getPassword = password.getText().toString();        @Override        protected Void doInBackground(Void... voids) {            try {                Class.forName("com.mysql.jdbc.Driver");                Connection con = DriverManager.getConnection("jdbc:mysql://192.168.1.5:3306/Quora", "root", "hello_world");                java.sql.Statement stmt = con.createStatement();                final String query = "SELECT * FROM User_Profile WHERE Email_ID=? AND Password=?";                final PreparedStatement ps = con.prepareStatement(query);                ps.setString(1, getEmailId);                ps.setString(2, getPassword);                ResultSet rs = ps.executeQuery();                if (!rs.isBeforeFirst()) {//			new Log_in_failed();//                    loginLayout.startAnimation(shakeAnimation);                    Login_Fragment.this.getActivity().runOnUiThread(new Runnable() {                        @Override                        public void run() {                            loginLayout.startAnimation(shakeAnimation);                            new CustomToast().Show_Toast(getActivity(), view,                                    "Wrong Username/Password.");                        }                    });                } else {                    Login_Fragment.this.getActivity().runOnUiThread(new Runnable() {                        @Override                        public void run() {                            new CustomToast().Show_Toast(getActivity(), view,                                    "Login Successful.");                        }                    });                }            } catch (Exception e1) {                // TODO Auto-generated catch block                e1.printStackTrace();            }            return null;        }    }}